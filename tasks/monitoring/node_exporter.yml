---
- debug:
    msg: prometheus - node_exporter tasks

- name: check that tar ends in tar.gz
  assert:
    that: monitoring.node_exporter.tar_url | regex_search('.tar.gz$')

- name: derive tar archive name
  set_fact:
    tar_archive_name: "{{ (monitoring.node_exporter.tar_url).split('/')[-1] | regex_replace('.tar.gz', '') }}"

- name: add user
  user:
    name: "{{ monitoring.node_exporter.user }}"
    system: yes
    shell: /usr/bin/false

- name: create dirs
  file:
    path: "{{ monitoring.node_exporter.dir.data }}"
    state: directory
    owner: "{{ monitoring.node_exporter.user }}"
    group: "{{ monitoring.node_exporter.user }}"

- name: check if already downloaded
  stat:
    path: "/tmp/{{ (monitoring.node_exporter.tar_url).split('/')[-1] }}"
  register: this

- name: download
  get_url:
    url: "{{ monitoring.node_exporter.tar_url }}"
    dest: /tmp
    mode: "0700"
    owner: "{{ monitoring.node_exporter.user }}"
    group: "{{ monitoring.node_exporter.user }}"
  when: not this.stat.exists

- name: check if already extracted
  stat:
    path: "/tmp/{{ tar_archive_name }}"
  register: this

- name: extract
  unarchive:
    src: "/tmp/{{ (monitoring.node_exporter.tar_url).split('/')[-1] }}"
    dest: /tmp
    remote_src: yes
  when: not this.stat.exists

- name: copy binary
  copy:
    src: /tmp/{{ tar_archive_name }}/node_exporter
    dest: /usr/local/bin
    mode: "0700"
    owner: "{{ monitoring.node_exporter.user }}"
    group: "{{ monitoring.node_exporter.user }}"
    remote_src: yes

- name: create node_exporter.service
  template:
    src: templates/node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service

- name: restorecon
  shell: restorecon -R "{{ monitoring.node_exporter.dir.data }}"
  changed_when: no

- name: reload systemd
  systemd:
    daemon_reload: yes

- name: start node_exporter
  service:
    name: node_exporter
    state: started
    enabled: yes
